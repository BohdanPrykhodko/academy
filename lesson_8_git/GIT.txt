git init - иниціализируем папку (синхр. с сервером )
когда перенесли в папку вводим 
git commit - коммент ставим
git add . - добавляем все файлы
git status - проверка статуса перезаписали или нет

git commit -m "first commit"
git remote add origin http://github....... и сам путь репозитор
git push  -u origin master

git config --global user.email "bodianz@mail.ru"
git config --global user.name "Bohdan"

git log - проверить добавлено ли изминение
git commit -a -m "второе изминение" - добавляем второе изменение
git log -p - показывает что именно мы добавили для выххода ctrl+c сочетание клавиш
git reset HEAD index.html - удалить файл
git log -2 - показывает 2 последних коммита 
git commit --amend - отмена, если рано закоментировал

git remote add origin http:// githyb.io..... называем проект origin
git push -u origin master ключ -u сокращает после него можно просто писать git push

Ветвление и слияние веток создание новой
git branch - просмотр всех веток и на которой мы находимся
git branch branch2 - создали новую ветку branch2
git chtckout branch2 - перейти на другую ветку
Чтобы слиять ветку нужно перейти на ветку master , а если на одной строке в ветках разное написано выскакивает конфликт автоматическое слияние невозможно
Нужно слиять напишем в редакторе Master & branch2 и уже справа будет статус починен, а если мы перейдём на ветку branch2 то строка будет придедущая до слияние то что и было
git merge branch2 - слияние веток данном случае branch2
git branch -d branch2 - удалить ветку
git checkout -b branch3 - сразу создаёт и переходит на ветку

git clone http:// github.io - вытащить файлы с репозитория

Откат Коммита
Для отката последнего локального коммита используйте git reset. Для отката коммита, который вы запушили на сервер, используйте git revert.

git reset --hard HEAD~1 - удалить коммит Чтобы откатиться на несколько коммитов, нужно передать другой аргумент вместо HEAD~1 (в частности, можно SHA1-идентификатор последнего «нужного» коммита).

git hist - посмотреть коммиты
git tag oops - отметим последний коммит тегом, чтобы потом можно было его найти.
git reset --hard v1 - Наша ветка master теперь указывает на коммит v1, а коммитов Oops и Revert Oops в ветке уже нет. Параметр --hard указывает, что рабочий каталог должен быть обновлен в соответствии с новым head ветки.

git clean
Команда git clean используется для удаления мусора из рабочей директории. Это могут быть результаты сборки проекта или файлы конфликтов слияний.

ВЕРНУТЬ ВСЁ НАЗАД $ git reset --hard <commit> где коммит это точкак котрой нужно откатиться 

git reset --hard HEAD@{1} - буквально значит: «Хэй, гит, покажи мне файлы в том виде, в каком они были 1 действие назад».
